#ifdef _DEBUG
#include"../head.h"
#endif

class Solution {
public:
	string getrepeat(const string& str)
	{
		int offset = 0, len = 1;;
		for (int i = 0; i < str.size(); ++i)
		{
			if (str[offset] == str[i])
			{
				offset = (offset + 1) % len;
			}
			else if (offset != 0)
			{
				int index = str.find(str[i]);

			}
			else
			{
				len = i + 1, offset = 0;
			}
		}
		return str.substr(0, len);
	}
	int gcd(int lhs, int rhs)
	{
		return rhs ? gcd(rhs, lhs % rhs) : lhs;
	}
public:
	string gcdOfStrings(string str1, string str2) {
		if (str1.empty() || str2.empty())
			return "";

		string lhs = getrepeat(str1), rhs = getrepeat(str2);

		if (lhs != rhs)
			return "";
		else
		{
			int cd = gcd(str1.size(), str2.size()) / lhs.size();
			string ans;
			for (int i = 0; i < cd; ++i)
			{
				ans += lhs;
			}
			return ans;
		}
	}
};
#ifdef _DEBUG
#define asdf "BBACBBABCCADDDBDCDAB BBACBBABCCADDDBDCDAB"
int main() {
	Solution s;
	cout << s.getrepeat("aabaaaba") << endl;
	cout << s.getrepeat("BBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDAB") << endl;
	cout << s.getrepeat("aabaaaabaa") << endl;
	cout << s.getrepeat("BBACBBABCCADDDBDCDAB BBACBBABCCADDDBDCDAB") << endl;  //40
	//cout << s.gcdOfStrings("OBCNOOBCNOOBCNOOBCNOOBCNOOBCNOOBCNOOBCNO", "OBCNOOBCNOOBCNOOBCNOOBCNOOBCNOOBCNOOBCNOOBCNOOBCNOOBCNOOBCNOOBCNO") << endl;
	cout << s.gcdOfStrings("BBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDAB"
		, "BBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDABBBACBBABCCADDDBDCDAB") << endl;
	return 0;
}
#endif